@using HotelManagement.Data
@using HotelManagement.Components.Account.Shared
@using HotelManagement.Services


@inject IUserService UserService
@inject ILogger<CreateUserForm> Logger
@inject NavigationManager NavigationManager


<StatusMessage Message="@_message" />
<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" Enhance="true">
    <DataAnnotationsValidator />
    @if (_showSubHeading)
    {
        <h2>Create a new account.</h2>
    }
    <hr />
    <div class="row">
        <div class="col-sm-6">
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" aria-required="true" placeholder="First Name" id="firstname" />
                <label for="firstname">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" aria-required="true" placeholder="Last Name" id="lastname" />
                <label for="lastname">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
        </div>

        <div class="col-sm-6">
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.ContactNumber" class="form-control" aria-required="true" placeholder="contact number" />
                <label for="contactNumber">Contact Number</label>
                <ValidationMessage For="() => Input.ContactNumber" class="text-danger" />
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>
        </div>
        @if (_showDesignation)
        {
            <div class="col-sm-6">
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Designation" class="form-control" aria-required="true" placeholder="Designation" />
                    <label for="designation">Designation</label>
                    <ValidationMessage For="() => Input.Designation" class="text-danger" />
                </div>
            </div>

        }
    </div>

    <div>
        <button type="submit" class="w-100 btn btn-lg btn-primary">@_submitButtonText</button>
    </div>
    @if (_showLoginLink)
    {
        <div class="mt-3">
            <p>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Already have an account? Login</a>
            </p>
        </div>
    }
</EditForm>

@code {
    [Parameter]
    public RoleType Role { get; set; } = RoleType.Guest;

    [Parameter]
    public EventCallback OnSuccess { get; set; }

    private string _submitButtonText = "Register";

    public bool _showLoginLink = true;

    public bool _showSubHeading = true;

    public bool _showDesignation = false;

    [SupplyParameterFromForm]
    private RegisterUserModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? _message = null;

    protected override void OnParametersSet()
    {
        if (Role != RoleType.Guest)
        {
            _submitButtonText = "Create Staff Member";
            _showLoginLink = false;
            _showSubHeading = false;
            _showDesignation = true;
        }
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.ContactNumber = Input.ContactNumber;
        user.RoleName = Role.ToString();
        user.Designation = Input.Designation;

        var result = await UserService.CreateUserAsync(user, Input.Email, Input.Password);

        if (!result.IsSuccess)
        {
            _message = result.ErrorMessage;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        await OnSuccess.InvokeAsync();
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }
}

